#[repr(C)]
#[derive(Debug, Default, Clone, Copy)]
pub struct Srgb {
    pub r: u8,
    pub g: u8,
    pub b: u8,
    pub a: u8,
}

impl Srgb {
    #[inline]
    pub const fn new(r: u8, g: u8, b: u8, a: u8) -> Self {
        Self { r, g, b, a }
    }

    #[inline]
    pub const fn rgb(r: u8, g: u8, b: u8) -> Self {
        Self::new(r, g, b, 255)
    }

    #[inline]
    pub fn linear(self) -> LinearRgb {
        #[inline]
        fn linear(srgb: u8) -> f32 {
            SRGB_TO_LINEAR_LUT[srgb as usize]

            // WARN: MEGA SLOW
            // https://en.wikipedia.org/wiki/SRGB#Transfer_function_(%22gamma%22)
            // let v = srgb as f32 / 255.0;
            // if v <= 0.04045 {
            //     v / 12.92
            // } else {
            //     libm::powf((v + 0.055) / 1.055, 2.4)
            // }
        }

        LinearRgb::new(
            linear(self.r),
            linear(self.g),
            linear(self.b),
            self.a as f32 / 255.0,
        )
    }
}

impl From<LinearRgb> for Srgb {
    #[inline]
    fn from(value: LinearRgb) -> Self {
        value.srgb()
    }
}

#[derive(Debug, Default, Clone, Copy)]
pub struct LinearRgb {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}

impl LinearRgb {
    #[inline]
    pub const fn new(r: f32, g: f32, b: f32, a: f32) -> Self {
        Self { r, g, b, a }
    }

    #[inline]
    pub const fn rgb(r: f32, g: f32, b: f32) -> Self {
        Self::new(r, g, b, 1.0)
    }

    #[inline]
    pub fn srgb(self) -> Srgb {
        #[inline]
        fn srgb(l: f32) -> u8 {
            let i = (l.clamp(0.0, 1.0) * 1023.0) as usize;
            LINEAR_TO_SRGB_LUT[i]

            // WARN: MEGA SLOW
            // https://en.wikipedia.org/wiki/SRGB#Transfer_function_(%22gamma%22)
            // if l <= 0.0031308 {
            //     (l * 12.92 * 255.0) as u8
            // } else {
            //     let srgb = libm::powf(l.clamp(0.0, 1.0), 1.0 / 2.4) * 1.055 - 0.055;
            //     (srgb * 255.0) as u8
            // }
        }

        Srgb::new(
            srgb(self.r),
            srgb(self.g),
            srgb(self.b),
            (self.a.clamp(0.0, 1.0) * 255.0) as u8,
        )
    }
}

impl From<Srgb> for LinearRgb {
    #[inline]
    fn from(value: Srgb) -> Self {
        value.linear()
    }
}

#[derive(Debug, Default, Clone, Copy)]
pub struct Hsv {
    pub h: f32,
    pub s: f32,
    pub v: f32,
}

impl Hsv {
    #[inline]
    pub const fn new(h: f32, s: f32, v: f32) -> Self {
        Self { h, s, v }
    }

    pub fn srgb(self) -> Srgb {
        // https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB
        let c = self.v * self.s;
        let hp = self.h / (60.0 / 360.0);
        let x = c * (1.0 - (hp % 2.0 - 1.0).abs());
        let (r, g, b) = match hp {
            0.0..1.0 => (c, x, 0.0),
            1.0..2.0 => (x, c, 0.0),
            2.0..3.0 => (0.0, c, x),
            3.0..4.0 => (0.0, x, c),
            4.0..5.0 => (x, 0.0, c),
            _ => (c, 0.0, x),
        };

        let m = 255.0;
        Srgb::rgb((r * m) as u8, (g * m) as u8, (b * m) as u8)
    }

    pub fn linear(self) -> LinearRgb {
        self.srgb().linear()
    }
}

const SRGB_TO_LINEAR_LUT: [f32; 256] = [
    0.0,
    0.000303527,
    0.000607054,
    0.000910581,
    0.001214108,
    0.001517635,
    0.001821162,
    0.0021246888,
    0.002428216,
    0.002731743,
    0.00303527,
    0.0033465356,
    0.003676507,
    0.004024717,
    0.004391442,
    0.0047769533,
    0.005181517,
    0.0056053917,
    0.0060488326,
    0.006512091,
    0.00699541,
    0.0074990317,
    0.008023192,
    0.008568125,
    0.009134057,
    0.009721218,
    0.010329823,
    0.010960094,
    0.011612245,
    0.012286487,
    0.012983031,
    0.013702081,
    0.014443844,
    0.015208514,
    0.015996292,
    0.016807375,
    0.017641952,
    0.018500218,
    0.019382361,
    0.020288562,
    0.02121901,
    0.022173883,
    0.023153365,
    0.02415763,
    0.025186857,
    0.026241222,
    0.027320892,
    0.028426038,
    0.029556833,
    0.03071344,
    0.03189603,
    0.033104762,
    0.034339808,
    0.035601314,
    0.036889445,
    0.038204364,
    0.039546236,
    0.0409152,
    0.04231141,
    0.043735027,
    0.045186203,
    0.046665084,
    0.048171822,
    0.049706563,
    0.051269468,
    0.052860655,
    0.05448028,
    0.056128494,
    0.057805434,
    0.05951124,
    0.06124607,
    0.06301004,
    0.06480328,
    0.06662595,
    0.06847818,
    0.07036011,
    0.07227186,
    0.07421358,
    0.07618539,
    0.07818743,
    0.08021983,
    0.082282715,
    0.084376216,
    0.086500466,
    0.088655606,
    0.09084173,
    0.09305898,
    0.095307484,
    0.09758736,
    0.09989874,
    0.10224175,
    0.10461649,
    0.10702311,
    0.10946172,
    0.111932434,
    0.11443538,
    0.11697067,
    0.119538434,
    0.1221388,
    0.12477184,
    0.1274377,
    0.13013649,
    0.13286833,
    0.13563335,
    0.13843162,
    0.1412633,
    0.14412849,
    0.14702728,
    0.1499598,
    0.15292616,
    0.15592647,
    0.15896086,
    0.1620294,
    0.16513222,
    0.1682694,
    0.1714411,
    0.17464739,
    0.17788841,
    0.18116423,
    0.18447499,
    0.18782076,
    0.19120167,
    0.19461781,
    0.1980693,
    0.20155624,
    0.2050787,
    0.20863685,
    0.21223073,
    0.21586053,
    0.21952623,
    0.22322798,
    0.22696589,
    0.23074007,
    0.23455065,
    0.23839766,
    0.2422812,
    0.2462014,
    0.25015837,
    0.25415218,
    0.2581829,
    0.26225072,
    0.26635566,
    0.27049786,
    0.27467737,
    0.27889434,
    0.2831488,
    0.2874409,
    0.2917707,
    0.29613832,
    0.30054384,
    0.30498737,
    0.30946895,
    0.31398875,
    0.31854683,
    0.32314324,
    0.32777813,
    0.33245158,
    0.33716366,
    0.34191445,
    0.3467041,
    0.3515327,
    0.35640025,
    0.36130688,
    0.3662527,
    0.37123778,
    0.37626222,
    0.3813261,
    0.38642952,
    0.39157256,
    0.3967553,
    0.40197787,
    0.4072403,
    0.4125427,
    0.41788515,
    0.42326775,
    0.42869055,
    0.4341537,
    0.43965724,
    0.44520125,
    0.45078585,
    0.4564111,
    0.46207705,
    0.46778384,
    0.47353154,
    0.47932023,
    0.48514998,
    0.4910209,
    0.49693304,
    0.5028866,
    0.50888145,
    0.5149178,
    0.5209957,
    0.5271152,
    0.5332765,
    0.5394796,
    0.5457246,
    0.5520115,
    0.5583405,
    0.56471163,
    0.5711249,
    0.5775805,
    0.5840785,
    0.5906189,
    0.5972019,
    0.6038274,
    0.6104956,
    0.61720663,
    0.62396044,
    0.6307572,
    0.63759696,
    0.64447975,
    0.6514057,
    0.65837485,
    0.66538733,
    0.6724432,
    0.67954254,
    0.68668544,
    0.6938719,
    0.701102,
    0.70837593,
    0.71569365,
    0.72305524,
    0.7304609,
    0.73791057,
    0.74540436,
    0.7529423,
    0.76052463,
    0.7681513,
    0.77582234,
    0.7835379,
    0.79129803,
    0.79910284,
    0.80695236,
    0.8148467,
    0.82278585,
    0.83076996,
    0.8387991,
    0.8468733,
    0.8549927,
    0.8631573,
    0.8713672,
    0.87962234,
    0.8879232,
    0.8962694,
    0.90466136,
    0.9130987,
    0.92158204,
    0.9301109,
    0.9386859,
    0.9473066,
    0.9559735,
    0.9646863,
    0.9734455,
    0.9822506,
    0.9911022,
    1.0,
];

const LINEAR_TO_SRGB_LUT: [u8; 1024] = [
    0, 3, 6, 9, 12, 15, 17, 19, 21, 23, 25, 26, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42,
    43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 51, 52, 53, 54, 54, 55, 56, 57, 57, 58, 59, 59, 60, 61,
    61, 62, 63, 63, 64, 64, 65, 66, 66, 67, 67, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 75,
    75, 76, 76, 77, 77, 78, 78, 79, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 85, 86,
    86, 87, 87, 88, 88, 88, 89, 89, 90, 90, 90, 91, 91, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 96,
    96, 96, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 102, 102, 102, 103, 103, 103,
    104, 104, 104, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110,
    110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116,
    116, 116, 117, 117, 117, 117, 118, 118, 118, 119, 119, 119, 119, 120, 120, 120, 121, 121, 121,
    121, 122, 122, 122, 123, 123, 123, 123, 124, 124, 124, 125, 125, 125, 125, 126, 126, 126, 126,
    127, 127, 127, 128, 128, 128, 128, 129, 129, 129, 129, 130, 130, 130, 130, 131, 131, 131, 131,
    132, 132, 132, 133, 133, 133, 133, 134, 134, 134, 134, 135, 135, 135, 135, 136, 136, 136, 136,
    137, 137, 137, 137, 138, 138, 138, 138, 138, 139, 139, 139, 139, 140, 140, 140, 140, 141, 141,
    141, 141, 142, 142, 142, 142, 143, 143, 143, 143, 143, 144, 144, 144, 144, 145, 145, 145, 145,
    145, 146, 146, 146, 146, 147, 147, 147, 147, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149,
    150, 150, 150, 150, 151, 151, 151, 151, 151, 152, 152, 152, 152, 153, 153, 153, 153, 153, 154,
    154, 154, 154, 154, 155, 155, 155, 155, 155, 156, 156, 156, 156, 157, 157, 157, 157, 157, 158,
    158, 158, 158, 158, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161,
    162, 162, 162, 162, 162, 163, 163, 163, 163, 163, 164, 164, 164, 164, 164, 165, 165, 165, 165,
    165, 165, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 169, 169,
    169, 169, 169, 169, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 171, 172, 172, 172, 172,
    172, 173, 173, 173, 173, 173, 173, 174, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 176,
    176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 178, 178, 179, 179, 179,
    179, 179, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 181, 181, 182, 182, 182, 182, 182,
    182, 183, 183, 183, 183, 183, 183, 184, 184, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185,
    186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 188, 188, 188, 188, 188, 188, 189,
    189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 191, 191, 191, 191, 191, 191, 191, 192,
    192, 192, 192, 192, 192, 193, 193, 193, 193, 193, 193, 194, 194, 194, 194, 194, 194, 194, 195,
    195, 195, 195, 195, 195, 196, 196, 196, 196, 196, 196, 196, 197, 197, 197, 197, 197, 197, 198,
    198, 198, 198, 198, 198, 198, 199, 199, 199, 199, 199, 199, 200, 200, 200, 200, 200, 200, 200,
    201, 201, 201, 201, 201, 201, 201, 202, 202, 202, 202, 202, 202, 203, 203, 203, 203, 203, 203,
    203, 204, 204, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 205, 205, 206, 206, 206, 206,
    206, 206, 206, 207, 207, 207, 207, 207, 207, 207, 208, 208, 208, 208, 208, 208, 208, 209, 209,
    209, 209, 209, 209, 209, 210, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 211,
    212, 212, 212, 212, 212, 212, 212, 213, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214,
    214, 214, 214, 215, 215, 215, 215, 215, 215, 215, 216, 216, 216, 216, 216, 216, 216, 217, 217,
    217, 217, 217, 217, 217, 217, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219, 219,
    219, 219, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 221, 221, 222, 222,
    222, 222, 222, 222, 222, 223, 223, 223, 223, 223, 223, 223, 223, 224, 224, 224, 224, 224, 224,
    224, 224, 225, 225, 225, 225, 225, 225, 225, 225, 226, 226, 226, 226, 226, 226, 226, 227, 227,
    227, 227, 227, 227, 227, 227, 228, 228, 228, 228, 228, 228, 228, 228, 229, 229, 229, 229, 229,
    229, 229, 229, 230, 230, 230, 230, 230, 230, 230, 230, 231, 231, 231, 231, 231, 231, 231, 231,
    232, 232, 232, 232, 232, 232, 232, 232, 233, 233, 233, 233, 233, 233, 233, 233, 234, 234, 234,
    234, 234, 234, 234, 234, 235, 235, 235, 235, 235, 235, 235, 235, 235, 236, 236, 236, 236, 236,
    236, 236, 236, 237, 237, 237, 237, 237, 237, 237, 237, 238, 238, 238, 238, 238, 238, 238, 238,
    238, 239, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240, 240, 241, 241,
    241, 241, 241, 241, 241, 241, 241, 242, 242, 242, 242, 242, 242, 242, 242, 243, 243, 243, 243,
    243, 243, 243, 243, 243, 244, 244, 244, 244, 244, 244, 244, 244, 244, 245, 245, 245, 245, 245,
    245, 245, 245, 246, 246, 246, 246, 246, 246, 246, 246, 246, 247, 247, 247, 247, 247, 247, 247,
    247, 247, 248, 248, 248, 248, 248, 248, 248, 248, 248, 249, 249, 249, 249, 249, 249, 249, 249,
    250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 251, 251, 252,
    252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254,
    254, 254, 254, 254, 254, 254, 254, 254,
];
